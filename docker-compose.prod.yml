services:
  traefik:
    image: traefik:v3
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/config:/etc/traefik/config:ro
      - ./traefik/acme.json:/acme.json:rw
      - ./traefik/logs:/var/log/traefik:rw
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.futurprive.com`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:$$apr1$$xyxyzyzz" # Cambia esto por una contraseña generada con htpasswd
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"

  nextjs:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: nextjs-app-prod
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=https://api.futurprive.com
    networks:
      - web
    depends_on:
      - django
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextjs.rule=Host(`futurprive.com`)"
      - "traefik.http.routers.nextjs.entrypoints=websecure"
      - "traefik.http.routers.nextjs.tls.certresolver=letsencrypt"
      - "traefik.http.services.nextjs.loadbalancer.server.port=3000"

  django:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: django-app-prod
    restart: unless-stopped
    volumes:
      - static_data:/app/staticfiles
      - media_data:/app/mediafiles
    environment:
      - DEBUG=0
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - ALLOWED_HOSTS=api.futurprive.com
      - DATABASE_ENGINE=django.db.backends.postgresql
      - DATABASE_NAME=${POSTGRES_DB}
      - DATABASE_USER=${POSTGRES_USER}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
    command: >
      sh -c "sleep 5 &&
             python manage.py migrate --no-input &&
             python manage.py collectstatic --no-input &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3"
    depends_on:
      - postgres
    networks:
      - web
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=Host(`api.futurprive.com`)"
      - "traefik.http.routers.django.entrypoints=websecure"
      - "traefik.http.routers.django.tls.certresolver=letsencrypt"
      - "traefik.http.services.django.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.django-cors.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE"
      - "traefik.http.middlewares.django-cors.headers.accesscontrolalloworiginlist=https://futurprive.com"
      - "traefik.http.middlewares.django-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.django-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.django-cors.headers.addvaryheader=true"
      - "traefik.http.routers.django.middlewares=django-cors"

  nginx:
    image: nginx:1.25-alpine
    container_name: nginx-static
    restart: unless-stopped
    volumes:
      - ./nginx/conf/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - static_data:/usr/share/nginx/html/static:ro
      - media_data:/usr/share/nginx/html/media:ro
    depends_on:
      - django
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`static.futurprive.com`)"
      - "traefik.http.routers.nginx.entrypoints=websecure"
      - "traefik.http.routers.nginx.tls.certresolver=letsencrypt"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"

  postgres:
    image: postgres:14-alpine
    container_name: postgres-db-prod
    restart: unless-stopped
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:latest
    container_name: adminer-prod
    restart: unless-stopped
    networks:
      - web
      - internal
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`db-admin.futurprive.com`)"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.tls.certresolver=letsencrypt"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
      - "traefik.http.routers.adminer.middlewares=adminer-auth"
      - "traefik.http.middlewares.adminer-auth.basicauth.users=admin:$$apr1$$xyxyzyzz" # Cambia esto por una contraseña generada con htpasswd

networks:
  web:
    external: true
  internal:
    external: false

volumes:
  postgres_data_prod:
  static_data:
  media_data:
